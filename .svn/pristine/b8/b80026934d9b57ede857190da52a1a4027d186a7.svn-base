//
//  ZXRemindController.swift
//  YDHYK
//
//  Created by 120v on 2017/11/23.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

typealias requestCompletion = (_ succ:Bool, _ code: Int, _ listModel:Array<ZXRemindModel>?,_ errMsg: String) -> Void

class ZXRemindController: NSObject {
    //MARK: - 按时间查询用药提醒
    class func requestForSearchByRemindTime(completion:@escaping requestCompletion) {
        ZXNetwork.asyncRequest(withUrl: ZXAPI.api(address: ZXAPIConst.UseDrug.searchByTime), params: Dictionary(), method: .post) { (success, code, content, string, error) in
            if success {
                if let data = content["data"] as? Dictionary<String,Any>,data.count > 0 {
                    let resultList:Array<Any> = data.sorted(by: { (arg0, arg1) -> Bool in
                        return arg1.key > arg0.key
                    })
                 let resultModelList = ZXRemindModel.mj_objectArray(withKeyValuesArray: resultList)
                    completion(true,code,resultModelList as? Array<ZXRemindModel>,error?.errorMessage ?? "")
                }else{
                    completion(true,code,nil,error?.errorMessage ?? "")
                }
            }else{
                completion(false,code,nil,error?.errorMessage ?? "")
            }
        }
    }
    
    //MARK: - 已添加提醒
    class func requestForDrugRemindList(completion:@escaping requestCompletion) {
        ZXNetwork.asyncRequest(withUrl: ZXAPI.api(address: ZXAPIConst.UseDrug.drugRemindList), params: Dictionary(), method: .post) { (success, code, content, string, error) in
            if success {
                if let data = content["data"] as? Array<Any>,data.count > 0 {
                    let resultModelList = ZXRemindModel.mj_objectArray(withKeyValuesArray: data)
                    completion(true,code,resultModelList as? Array<ZXRemindModel>,error?.errorMessage ?? "")
                }else{
                    completion(true,code,nil,error?.errorMessage ?? "")
                }
            }else{
                completion(false,code,nil,error?.errorMessage ?? "")
            }
        }
    }
}
