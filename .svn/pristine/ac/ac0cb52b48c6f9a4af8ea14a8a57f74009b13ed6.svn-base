//
//  ZXNearbyRootViewController+BMap.swift
//  YDHYK
//
//  Created by 120v on 2017/11/16.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

//MARK: - BMKMapViewDelegate
extension ZXNearbyRootViewController: BMKMapViewDelegate {
    func mapView(_ mapView: BMKMapView!, viewFor annotation: BMKAnnotation!) -> BMKAnnotationView! {
        if ((annotation as? BMKPointAnnotation) != nil) {
            //1.自定义annotation
            let normalAnnotationViewID: String = "NormalAnnotation"
            var annoView = mapView.dequeueReusableAnnotationView(withIdentifier: normalAnnotationViewID) as! ZXNormalAnnotationView?
            if annoView == nil {
                annoView = ZXNormalAnnotationView.init(annotation: annotation, reuseIdentifier: normalAnnotationViewID)
                //不显示点击标注后的视图
                annoView?.canShowCallout = false
            }
            
            //2.取值
            let  model: ZXSearchModel = self.dataModelArray.object(at: self.index) as! ZXSearchModel
            
            //3.自定义标注
            var image: UIImage = UIImage.init()
            if model.isChineseMedicine == 1 {
                image = #imageLiteral(resourceName: "yg-small")
            }else if model.isChineseMedicine == 0{
                image = #imageLiteral(resourceName: "yd-small")
            }
            annoView?.size = image.size
            annoView?.setNormalImage(image)
            annoView?.isChineseMedicine = Int(model.isChineseMedicine)
            
            //4.设置索引
            annoView?.storeId = Int(model.storeId)
            if self.index < self.dataModelArray.count - 1 {
                self.index += 1
            }
            annoView?.annotation = annotation
            
            return annoView
        }
        
        return nil
    }
    
    func mapView(_ mapView: BMKMapView!, didSelect view: BMKAnnotationView!) {
        self.isMapBlank = false
        self.mapView(self.mapView, didDeselect: self.mapView.view(for: self.lastAnnotation))
        //1.切换标注图标
        if ((view as? ZXNormalAnnotationView) != nil) {
            let normalView: ZXNormalAnnotationView = view as! ZXNormalAnnotationView
            normalView.normalImag = UIImage.init()
            var image: UIImage = UIImage.init()
            if normalView.isChineseMedicine == 1 {
                image = #imageLiteral(resourceName: "yg-big")
            }else if normalView.isChineseMedicine == 0 {
                image = #imageLiteral(resourceName: "yd-big")
            }
            normalView.setNormalImage(image)
            
            self.lastAnnotation = normalView.annotation as! BMKPointAnnotation
            
            //2.刷新底部视图数据
            let dataArray: NSMutableArray = NSMutableArray.init(capacity: 1)
            for model in self.dataModelArray {
                let model = model as! ZXSearchModel
                if model.storeId == normalView.storeId {
                    dataArray.add(model)
                    self.detailView.loadData(dataArray)
                }
            }
        }
    }
    
    func mapView(_ mapView: BMKMapView!, didDeselect view: BMKAnnotationView!) {
        if (view as? ZXNormalAnnotationView) != nil, self.isMapBlank == false {
            let normalView: ZXNormalAnnotationView = view as! ZXNormalAnnotationView
            var img: UIImage = UIImage.init()
            if normalView.isChineseMedicine == 1 {
                img = #imageLiteral(resourceName: "yg-small")
            }else{
                img = #imageLiteral(resourceName: "yd-small")
            }
            normalView.setNormalImage(img)
        }
    }
    
    func mapView(_ mapView: BMKMapView!, onClickedMapBlank coordinate: CLLocationCoordinate2D) {
        let lastView: BMKAnnotationView = self.mapView.view(for: self.lastAnnotation)
        self.isMapBlank = true
        if lastView.isSelected == false {
            self.mapView(self.mapView, didSelect: self.mapView.view(for: self.lastAnnotation))
        }
    }
}

//MARK: - BMKLocationServiceDelegate
extension ZXNearbyRootViewController: BMKLocationServiceDelegate {
    func didUpdateUserHeading(_ userLocation: BMKUserLocation!) {
        self.mapView.updateLocationData(userLocation)
    }
    
    func didUpdate(_ userLocation: BMKUserLocation!) {
        self.mapView.updateLocationData(userLocation)
        self.userLocation = userLocation.location.coordinate
        if userLocation.location.coordinate.latitude != 0, userLocation.location.coordinate.longitude != 0 {
            if self.isFirstOpenMap == false {//首次进入地图获取位置成功后请求数据
                //附近药店请求
                self.requestForPharmacyList()
                self.isFirstOpenMap = true
            }
        }
    }
}

//MARK: - HTTP
extension ZXNearbyRootViewController {
    func requestForPharmacyList() {
        self.dataModelArray.removeAllObjects()
        var dict:Dictionary<String,Any> = Dictionary()
        dict["latitude"] = self.userLocation.latitude
        dict["longitude"] = self.userLocation.longitude
        ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: nil)
        ZXNetwork.asyncRequest(withUrl: ZXAPI.api(address: ZXAPIConst.Nearby.nearbyDrugstore), params: dict, method: .post) { (succ, code, content, str, errMsg) in
            ZXHUD.hide(for: self.view, animated: true)
            if code == ZXAPI_SUCCESS {
                if let data = content["data"] as? Array<Dictionary<String,Any>>,data.count != 0{
                    self.dataModelArray = ZXSearchModel.mj_objectArray(withKeyValuesArray: data)
                    //
                    self.addNormalAnnotation()
                    //
                    self.loadDetailData()
                    //
                    self.sava()
                }
            }else{
                ZXHUD.showFailure(in: self.view, text: (errMsg?.errorMessage)!, delay: ZX.HUDDelay)
            }
        }
    }
    
    //标注
    func addNormalAnnotation() {
        self.index = 0
        if self.mapView.annotations.count != 0 {
            self.mapView.removeAnnotation(self.mapView.annotations as! BMKAnnotation)
        }
        
        let annoArray: NSMutableArray = NSMutableArray.init(capacity: self.dataModelArray.count)
        for model in self.dataModelArray {
            let model: ZXSearchModel = model as! ZXSearchModel
            let annotation: BMKPointAnnotation = BMKPointAnnotation()
            var coor: CLLocationCoordinate2D = CLLocationCoordinate2D()
            let la: String = (model.latitude)!
            let lo: String = (model.longitude)!
            coor.latitude = CLLocationDegrees.init(Double(la)!)
            coor.longitude = CLLocationDegrees.init(Double(lo)!)
            annotation.coordinate = coor
            annoArray.add(annotation)
        }
        self.mapView.addAnnotations(annoArray as! [Any])
        
        if self.isListVCLocationClick == false {
            self.lastAnnotation = annoArray[0] as! BMKPointAnnotation
            self.mapView.selectAnnotation(annoArray[0] as! BMKAnnotation, animated: true)
        }else{
            self.selectedAnnotation(self.modelArray_store as! Array<ZXSearchModel>)
        }
    }
    
    //设置底部视图数据
    func loadDetailData() {
        if self.isListVCLocationClick == false {
            let arr: NSMutableArray = NSMutableArray.init(capacity: 1)
            let model = self.dataModelArray.object(at: 0)
            arr.add(model)
            self.detailView.loadData(arr)
        }
    }
    
    //保存数据库
    func sava() {
        for model in self.dataModelArray {
            if let model = model as? ZXSearchModel {
                let str = model.distance.replacingOccurrences(of: "km", with: "")
                model.distanceF = Float(str)!
            }
        }
        DispatchQueue.global().async {
            ZXSearchModel.clearTable()
            let succ = ZXSearchModel.save(self.dataModelArray as! [ZXSearchModel])
            if succ == true {
                print("Save Successed!")
            }
        }
    }
    
    //取消和选中
    func selectedAnnotation(_ array: Array<ZXSearchModel>) {
        let model = array.first
        var coor: CLLocationCoordinate2D = CLLocationCoordinate2D()
        let la: String = (model?.latitude)!
        let lo: String = (model?.longitude)!
        coor.latitude = CLLocationDegrees.init(Double(la)!)
        coor.longitude = CLLocationDegrees.init(Double(lo)!)
        
        //2.取消选中
        let annoArray: NSArray = self.mapView.annotations! as NSArray
        annoArray.enumerateObjects { (_ objct: Any, _ index: Int, _ stop: UnsafeMutablePointer<ObjCBool>) in
            let deselectAnno: BMKPointAnnotation = objct as! BMKPointAnnotation
            if deselectAnno.coordinate.latitude == self.lastAnnotation.coordinate.latitude , deselectAnno.coordinate.longitude == self.lastAnnotation.coordinate.longitude {
                stop[0] = true
                self.mapView(self.mapView, didDeselect: self.mapView.view(for: deselectAnno))
            }
        }
        
        //3.选中
        let selectArray: NSArray = self.mapView.annotations! as NSArray
        selectArray.enumerateObjects { (_ objct: Any, _ index: Int, _ stop: UnsafeMutablePointer<ObjCBool>) in
            let selectAnno: BMKPointAnnotation = objct as! BMKPointAnnotation
            print(selectAnno.coordinate.latitude,selectAnno.coordinate.longitude)
            if selectAnno.coordinate.latitude == coor.latitude , selectAnno.coordinate.longitude == coor.longitude {
                stop[0] = true
                //3.1 选中
                self.mapView(self.mapView, didSelect: self.mapView.view(for: selectAnno))
                
                //3.2 获取用户位置
                var center:CLLocationCoordinate2D = CLLocationCoordinate2D.init()
                center.latitude = selectAnno.coordinate.latitude
                center.longitude = selectAnno.coordinate.longitude
                
                //3.3 设置地图中心点
                self.setUserCenter(center)
                
                //3.4 保存上一次的选中标准
                self.lastAnnotation = selectAnno
            }
        }
    }
}

extension ZXNearbyRootViewController: ZXStoreDetailViewDelegate {
    func didZXStoreDetailView(_ sender: UIButton, _ model: ZXSearchModel) {
        switch sender.tag {
        case ZXStoreCell.BtnTag.nav://导航
            break
        case ZXStoreCell.BtnTag.tel://电话
            break
        case ZXStoreCell.BtnTag.join://加入会员
            break
        case ZXStoreCell.BtnTag.buy://购药
            break
        default:
            break
        }
    }
}
