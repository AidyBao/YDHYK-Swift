//
//  ZXDiscoverRootViewController.swift
//  YDHYK
//
//  Created by screson on 2017/11/1.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

class ZXDiscoverRootViewController: ZXUIViewController {
    
    var currentPage = 1
    var arrDiscoverList: Array<ZXDiscoverModel> = []
    
    @IBOutlet weak var ccvTopMenu: UICollectionView!
    @IBOutlet weak var tblList: UITableView!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.title = "发现"
        self.hidesBottomBarWhenPushed = false
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        
        self.zx_addNavBarButtonItems(textNames: ["购药"], font: nil, color: nil, at: .right)
        self.ccvTopMenu.backgroundColor = UIColor.zx_tintColor
        self.ccvTopMenu.register(UINib.init(nibName: ZXMenuCCVCell.NibName, bundle: nil), forCellWithReuseIdentifier: ZXMenuCCVCell.reuseIdentifier)
        self.ccvTopMenu.delegate = self
        self.ccvTopMenu.dataSource = self
        
        self.tblList.backgroundColor = .clear
        self.tblList.delegate = self
        self.tblList.dataSource = self
        self.tblList.contentInset = UIEdgeInsetsMake(100, 0, 0, 0)
        self.tblList.scrollIndicatorInsets = UIEdgeInsetsMake(100, 0, 0, 0)
        self.tblList.showsHorizontalScrollIndicator = false
        self.tblList.register(UINib.init(nibName: ZXDiscoverSamllTypeCell.NibName, bundle: nil), forCellReuseIdentifier: ZXDiscoverSamllTypeCell.reuseIdentifier)
        self.tblList.register(UINib.init(nibName: ZXDiscoverBigTypeCell.NibName, bundle: nil), forCellReuseIdentifier: ZXDiscoverBigTypeCell.reuseIdentifier)
        self.tblList.register(ZXEmptyHeader.self, forHeaderFooterViewReuseIdentifier: ZXEmptyHeader.reuseIdentifier)
        self.tblList.zx_addHeaderRefresh(showGif: true, target: self, action: #selector(zx_refresh))
        self.tblList.zx_addFooterRefresh(autoRefresh: true, target: self, action: #selector(zx_loadmore))
        self.tblList.mj_header.ignoredScrollViewContentInsetTop = -5
        self.tblList.mj_header.isHidden = true
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        if !onceLoad {
            onceLoad = true
            self.loadDiscoverList(showHUD: true)
        }
    }
    
    override func zx_rightBarButtonAction(index: Int) {
        let storeVC = ZXStoreRootViewController.configVC(storeId: "2000002", memberId: ZXUser.user.memberId, token: ZXUser.user.userToken)
        self.navigationController?.pushViewController(storeVC, animated: true)
    }
    
    override func zx_refresh() {
        currentPage = 1
        self.tblList.mj_footer.resetNoMoreData()
        self.loadDiscoverList(showHUD: false)
    }
    
    override func zx_loadmore() {
        currentPage += 1
        self.loadDiscoverList(showHUD: false)
    }
    
    func loadDiscoverList(showHUD: Bool) {
        if showHUD {
            ZXHUD.showLoading(in: self.view, text: ZX_LOADING_TEXT, delay: 0)
        }
        ZXDiscoverViewModel.loadList(pageNum: currentPage, pageSize: ZX.PageSize) { (success, code, list, errorMsg) in
            ZXHUD.hide(for: self.view, animated: true)
            ZXEmptyView.hide(from: self.tblList)
            self.tblList.mj_header.endRefreshing()
            self.tblList.mj_footer.endRefreshing()
            if success {
                if let list = list {
                    if self.currentPage == 1 {
                        self.arrDiscoverList = list
                    } else {
                        self.arrDiscoverList.append(contentsOf: list)
                    }
                    if self.arrDiscoverList.count < ZX.PageSize {
                        self.tblList.mj_footer.endRefreshingWithNoMoreData()
                    }
                    self.tblList.reloadData()
                }
                if self.arrDiscoverList.count == 0 {
                    ZXEmptyView.show(in: self.tblList, type: .noData, text: "没有新资讯")
                }
            } else {
                if code != ZXAPI_LOGIN_INVALID {
                    if self.arrDiscoverList.count > 0 {//之前有数据，再次获取时网络出错
                        if code == ZXAPI_HTTP_TIME_OUT {
                            ZXHUD.showFailure(in: self.view, text: errorMsg, delay: ZX.HUDDelay)
                        } else {
                            ZXHUD.showFailure(in: self.view, text: "此时无法访问服务器", delay: ZX.HUDDelay)
                        }
                    } else {//第一次获取数据就出错 详细网络连接错误
                        if code == ZXAPI_HTTP_ERROR {
                            ZXEmptyView.show(in: self.tblList, type: .networkError, text: nil, retry: {
                                self.loadDiscoverList(showHUD: true)
                            })
                        } else {
                            ZXEmptyView.show(in: self.tblList, type: .noData, text: "没有新资讯")
                            ZXHUD.showFailure(in: self.view, text: errorMsg, delay: ZX.HUDDelay)
                        }
                    }
                }else{
                    if self.arrDiscoverList.count == 0 {
                        ZXEmptyView.show(in: self.tblList, type: .noData, text: "没有新资讯")
                    }
                }
            }
        }
    }
}
