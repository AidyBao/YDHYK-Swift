//
//  ZXNearbyRootViewController.swift
//  YDHYK
//
//  Created by screson on 2017/11/1.
//  Copyright © 2017年 screson. All rights reserved.
//

import UIKit

class ZXNearbyRootViewController: ZXUIViewController {
    
    var isListVCLocationClick: Bool = false
    var modelArray: Array<Any> = []
    var modelArray_store: Array<Any> = []
    /**  百度基础地图 */
    @IBOutlet weak var mapView: BMKMapView!
    /**  底部视图 */
    @IBOutlet weak var detailView: UIView!
    /**  开启定位视图 */
    @IBOutlet weak var openLocationView: UIView!
    @IBOutlet weak var openLocationViewH: NSLayoutConstraint!
    
    /** 保存用户位置*/
    var userLocation: CLLocationCoordinate2D = CLLocationCoordinate2D()
    /** 保存是否为第一次打开百度地图*/
    var isFirstOpenMap: Bool = false

    
    
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.hidesBottomBarWhenPushed = false
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.openLocationView.backgroundColor = UIColor.zx_colorRGB(242, 146, 82, 0.8)
        
        //
        self.addSearchView()

        // Nav
        self.addNavView()
        
        //
        self.addNotifaction()
        
        //4.判断用户定位是否可用,如果定位可用则开启百度定位服务
        self.judgmentLocationServiceEnabled()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    func addNotifaction() {
        NotificationCenter.default.addObserver(self, selector: #selector(notifactionStatus(_:)), name: NSNotification.Name(rawValue: ZXNotification.BMap.isOpenLocation), object: nil)
    }
    
    @objc func notifactionStatus(_ info: Notification) {
        let isOpen: Bool = info.object as! Bool
        self.showTopView(isOpen)
    }
    
    //MARK: - NAV
    func addNavView() {
        self.zx_addNavBarButtonItems(textNames: ["关闭"], font: nil, color: nil, at: .left)
        self.zx_addNavBarButtonItems(textNames: ["列表"], font: nil, color: nil, at: .right)
    }
    
    override func zx_leftBarButtonAction(index: Int) {
        self.dismiss(animated: true, completion: nil)
    }
    
    override func zx_rightBarButtonAction(index: Int) {
        self.navigationController?.pushViewController(ZXNearbyStoreViewController(), animated: true)
    }
    
    //MARK: SearchView
    func addSearchView() {
        self.navigationItem.titleView = self.searchBtn
    }

    @objc func searchBtnAction() {
        self.navigationController?.pushViewController(ZXSearchViewController(), animated: true)
    }
    
    //MARK: - 判断用户定位是否可用,如果定位可用则开启百度定位服务
    func judgmentLocationServiceEnabled() {
        ZXLocationUtils.shareInstance.checkCurrentLocation { (status, location) in
            var isSuccess: Bool = false
            if status == .success {
                isSuccess = true
            }else{
                isSuccess = false
            }
            self.showTopView(isSuccess)
        }
    }
    
    //MARK: - 监听定位是否开启
    func observerLocationStatus() {
        
    }
    
    //MARK: - 判断顶部视图是否显示
    func showTopView(_ isOpen: Bool) {
        if isOpen {
            //1.开启顶部动画
            self.openTopViewAnimation(true)
            //2
            self.locService.startUserLocationService()
            //
            self.mapView.showsUserLocation = true
        }else{
            self.locService.stopUserLocationService()
            self.mapView.showsUserLocation = true
            self.openTopViewAnimation(false)
            
            //默认位置为公司
            var userLo: CLLocationCoordinate2D = CLLocationCoordinate2D()
            userLo.latitude = ZX.Location.latitude
            userLo.longitude = ZX.Location.longitude
            self.userLocation = userLo
            
            self.requestForPharmacyList()
        }
        //4.开启精度圈
        self.openLocationAccuracyCircle()
    }
    
    //MARK: - 开启顶部视图动画
    func openTopViewAnimation(_ isOpen: Bool) {
        if isOpen {
            self.openLocationView.isHidden = true
            self.openLocationViewH.constant = 0
        }else{
            self.openLocationViewH.constant = 64
            self.openLocationView.isHidden = false
        }
    }
    
    //MARK: - 开启精度圈
    func openLocationAccuracyCircle() {
        
    }
    
    //MARK: - 开启定位
    @IBAction func openLocationAction(_ sender: UIButton) {
        if #available(iOS 10.0, *) {
            UIApplication.shared.open(URL.init(string: UIApplicationOpenSettingsURLString)!, options: [UIApplicationOpenURLOptionUniversalLinksOnly:""]) { (succ) in
            }
        } else {
            UIApplication.shared.openURL(URL.init(string: UIApplicationOpenSettingsURLString)!)
        }
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    //MARK: - Lazy
    lazy var searchBtn: UIButton = {
        let btn: UIButton = UIButton.init(frame: CGRect.init(x: 0, y: 0, width: 290, height: 30))
        btn.backgroundColor = UIColor.white
        btn.setImage(#imageLiteral(resourceName: "icon-search"), for: .normal)
        btn.setTitle(" 搜索药店、医馆", for: .normal)
        btn.setTitleColor(UIColor.zx_textColorMark, for: .normal)
        btn.titleLabel?.font = UIFont.zx_titleFont
        btn.layer.cornerRadius = 5.0
        btn.layer.masksToBounds = true
        btn.addTarget(self, action: #selector(searchBtnAction), for: .touchUpInside)
        return btn
    }()
    
    func setMapView() {
        self.mapView.delegate = self
        self.mapView.userTrackingMode = BMKUserTrackingModeNone;
        self.mapView.mapType = UInt(BMKMapTypeStandard);
        self.mapView.isZoomEnabled = true;
        self.mapView.isScrollEnabled = true;
        self.mapView.showsUserLocation = true;//显示定位图层
    }
    
    /**  百度定位服务 */
    lazy var locService: BMKLocationService = {
        var service: BMKLocationService = BMKLocationService()
        service.delegate = self
        return service
    }()
    
    lazy var  dataModelArray: NSMutableArray = {
        let arr: NSMutableArray = NSMutableArray.init(capacity: 10)
        return arr
    }()
}

//MARK: - BMKMapViewDelegate
extension ZXNearbyRootViewController: BMKMapViewDelegate {
    func mapView(_ mapView: BMKMapView!, viewFor annotation: BMKAnnotation!) -> BMKAnnotationView! {
        return nil
    }
    
    func mapView(_ mapView: BMKMapView!, didSelect view: BMKAnnotationView!) {
        
    }
    
    func mapView(_ mapView: BMKMapView!, didDeselect view: BMKAnnotationView!) {
        
    }
    
}

//MARK: - BMKLocationServiceDelegate
extension ZXNearbyRootViewController: BMKLocationServiceDelegate {
    func didUpdateUserHeading(_ userLocation: BMKUserLocation!) {
        self.mapView.updateLocationData(userLocation)
    }
    
    func didUpdate(_ userLocation: BMKUserLocation!) {
        self.mapView.updateLocationData(userLocation)
        self.userLocation = userLocation.location.coordinate
        if userLocation.location.coordinate.latitude != 0, userLocation.location.coordinate.longitude != 0 {
            if self.isFirstOpenMap == false {//首次进入地图获取位置成功后请求数据
                //附近药店请求
                self.requestForPharmacyList()
                self.isFirstOpenMap = true
            }
        }
    }
}

//MARK: - HTTP
extension ZXNearbyRootViewController {
    func requestForPharmacyList() {
        
    }
}
